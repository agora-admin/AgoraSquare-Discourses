import { NextPage } from "next";
import Head from "next/head";
import Layout from "../../components/layout/Layout";
import TopBar from "../../components/topbar/TopBar";
import { useRouter } from "next/router";
import { useQuery } from "@apollo/client";
import { GET_DISCOURSE_BY_ID, GET_SESSIONS } from "../../lib/queries";
import { Calendar1, PathTool, Play, VideoOctagon, VideoSlash } from "iconsax-react";
import { shortAddress } from "../../helper/StringHelper";
import { formatDate, getAgo, getTimeFromDate } from "../../helper/TimeHelper";
import LoadingSpinner from "../../components/utils/LoadingSpinner";
import { useState } from "react";
import HLSPlayerDailog from "../../components/dialogs/HLSPlayerDailog";
const Watch: NextPage = () => {

    const route = useRouter();
    const { discourseId } = route.query;
    const [ cData, setCData ] = useState<any>();
    const [ openPlayer, setOpenPlayer ] = useState(false);

    const { loading: Dloading, error, data } = useQuery(GET_DISCOURSE_BY_ID, {
        variables: {
            id: discourseId
        },
        nextFetchPolicy: 'network-only'
    })

    const {
        data: sessionData,
        loading: sessionLoading,
        error: sessionError
    } = useQuery(GET_SESSIONS, {
        variables: {
            id: discourseId
        }
    })

    const handleOpen = (data: any) => {
        setCData(data);
        setOpenPlayer((prev => !prev));
    }

    console.log(sessionData);
    

    return (
        <div className="w-full h-screen overflow-x-clip">
            <Head>
                <title>DIscourses | AGORA SQUARE</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/discourse_logo_fav.svg" />
                {data && <meta property="og:title" content={data.getDiscourseById.title} />}
                {data && <meta property="og:description" content={data.getDiscourseById.description} />}
                {/* TODO: <meta property="og:url" content="https://www.imdb.com/title/tt0117500/" /> */}
            </Head>
            <Layout>
                <TopBar onDiscoursePage={false} />
                
                <div className='w-full min-h-screen flex flex-col py-10 gap-4 z-10'>
                    {
                        sessionLoading || Dloading &&
                        <div className="flex gap-4 flex-col w-full md:flex-[0.6] items-center pt-20">
                            <LoadingSpinner strokeColor={"#fff"} />
                        </div>
                    }

                    {error &&
                        <div className="flex gap-4 flex-col w-full md:flex-[0.6] items-center pt-20">
                            <img className='w-48' src="/404_dis.png" alt="" />
                        </div>

                    }
                    {!sessionLoading && !Dloading && <div className="flex flex-col mt-10 mx-10 lg:mx-0">
                        {!Dloading && data && !error &&
                            <div className="flex gap-4 sm:flex-row flex-col w-full md:flex-[0.6]">
                                <h3 className="text-white font-semibold text-2xl">{data.getDiscourseById.title}</h3>
                                <div className="flex gap-2 items-center">
                                    {/* <ChainExplorer data={data.getDiscourseById} /> */}
                                    {/* <div className="h-1/2 rounded-xl w-[2px] bg-[#212427]" /> */}
                                    <PathTool size="16" color="#6a6a6a" />
                                    <div className='flex items-center gap-2 text-[#616162] text-sm font-semibold'>
                                        {/* <div className='bg-gradient-g w-4 h-4 rounded-xl' /> */}
                                        <p className='text-white/60 text-xs'>{shortAddress(data.getDiscourseById.prop_starter)}</p>
                                    </div>
                                    <p className="text-white/40 text-[10px] ">{getAgo(data?.getDiscourseById?.initTS)}</p>

                                </div>
                            </div>
                        }
                        { !sessionError && <h3 className="text-sm font-Lexend text-white mt-6">Recordings <span className="text-[#c6c6c6]">/ sessions</span></h3>}
                        {
                            !error && sessionError &&
                            <div className="flex gap-4 flex-col w-full md:flex-[0.6] items-center pt-20">
                                <VideoSlash size='16' color="#c6c6c6" />
                                <p className="text-[#c6c6c6] text-xs font-Lexend">No recordings found</p>
                            </div>
                        }
                        {sessionData?.getSessions && <div className="w-full flex flex-col md:grid grid-cols-3 grid-flow-row mt-6 gap-3">
                            <HLSPlayerDailog open={openPlayer} setOpen={setOpenPlayer} data={cData} />
                            {
                                sessionData.getSessions.map((session: any) => (
                                    <div className="bg-card flex-col gap-4 p-4 rounded-lg" key={session.id}>
                                        <div className="flex items-center gap-2">
                                            <VideoOctagon size="16" color="#c6c6c6" />
                                            <p className="text-white text-xs font-Lexend">{(session.id).slice(-20)}</p>
                                        </div>
                                        <div className="flex items-center gap-2 mt-2">
                                            <Calendar1 size="16" color="#c6c6c6" />
                                            <p className="text-[#c6c6c6] text-xs font-Lexend">{getTimeFromDate(new Date(session.createdAt))}</p>
                                            <p className="text-[#c6c6c6]/60 text-xs font-Lexend">{formatDate(new Date(session.createdAt))}</p>
                                        </div>
                                        { session.recordingStatus !== "waiting" && <button onClick={() => handleOpen(session)} className="button-s mt-3 px-4 py-2 flex items-center gap-2">
                                            <p className="text-xs font-Lexend text-[#fff] font-bold">Play</p>
                                            <Play size='14' color="#fff" />
                                        </button>}
                                        { session.recordingStatus === "waiting" && <button className="button-s-d mt-3 px-4 py-2 flex items-center gap-2">
                                            <p className="text-xs font-Lexend text-[#fff] font-bold">Waiting..</p>
                                        </button>}
                                    </div>
                                ))
                            }
                        </div>}
                    </div>}
                </div>
            </Layout>
        </div>
    );
}

export default Watch;